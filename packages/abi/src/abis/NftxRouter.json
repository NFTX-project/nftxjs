[
  "constructor(address positionManager_, address router_, address quoter_, address nftxVaultFactory_, address PERMIT2_, uint256 lpTimelock_, uint256 earlyWithdrawPenaltyInWei_, uint256 vTokenDustThreshold_, address inventoryStaking_)",
  "error InvalidEarlyWithdrawPenalty()",
  "error NotNFTOwner()",
  "error UnableToSendETH()",
  "event AddLiquidity(uint256 vaultId, uint256 vTokensAmount, uint256[] nftIds, uint256 positionId, address pool)",
  "event BuyNFTs(uint256 nftCount, uint256 ethSpent)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event RemoveLiquidity(uint256 positionId, uint256 vaultId, uint256 vTokenAmt, uint256 wethAmt)",
  "event SellNFTs(uint256 nftCount, uint256 ethReceived)",
  "function PERMIT2() view returns (address)",
  "function WETH() view returns (address)",
  "function addLiquidity(tuple(uint256 vaultId, uint256 vTokensAmount, uint256[] nftIds, uint256[] nftAmounts, int24 tickLower, int24 tickUpper, uint24 fee, uint160 sqrtPriceX96, uint256 vTokenMin, uint256 wethMin, uint256 deadline, bool forceTimelock) params) payable returns (uint256 positionId)",
  "function addLiquidityWithPermit2(tuple(uint256 vaultId, uint256 vTokensAmount, uint256[] nftIds, uint256[] nftAmounts, int24 tickLower, int24 tickUpper, uint24 fee, uint160 sqrtPriceX96, uint256 vTokenMin, uint256 wethMin, uint256 deadline, bool forceTimelock) params, bytes encodedPermit2) payable returns (uint256 positionId)",
  "function buyNFTs(tuple(uint256 vaultId, uint256[] nftIds, uint256 deadline, uint24 fee, uint160 sqrtPriceLimitX96) params) payable",
  "function computePool(address vToken_, uint24 fee) view returns (address)",
  "function earlyWithdrawPenaltyInWei() view returns (uint256)",
  "function getPool(address vToken_, uint24 fee) view returns (address pool)",
  "function getPoolExists(uint256 vaultId, uint24 fee) view returns (address pool, bool exists)",
  "function getPoolExists(address vToken_, uint24 fee) view returns (address pool, bool exists)",
  "function increaseLiquidity(tuple(uint256 positionId, uint256 vaultId, uint256 vTokensAmount, uint256[] nftIds, uint256[] nftAmounts, uint256 vTokenMin, uint256 wethMin, uint256 deadline, bool forceTimelock) params) payable",
  "function increaseLiquidityWithPermit2(tuple(uint256 positionId, uint256 vaultId, uint256 vTokensAmount, uint256[] nftIds, uint256[] nftAmounts, uint256 vTokenMin, uint256 wethMin, uint256 deadline, bool forceTimelock) params, bytes encodedPermit2) payable",
  "function inventoryStaking() view returns (address)",
  "function isVToken0(address vtoken) view returns (bool)",
  "function lpTimelock() view returns (uint256)",
  "function nftxVaultFactory() view returns (address)",
  "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
  "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
  "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
  "function owner() view returns (address)",
  "function positionManager() view returns (address)",
  "function quoteBuyNFTs(address vtoken, uint256 nftsCount, uint24 fee, uint160 sqrtPriceLimitX96) returns (uint256 ethRequired)",
  "function quoter() view returns (address)",
  "function removeLiquidity(tuple(uint256 positionId, uint256 vaultId, uint256[] nftIds, uint128 liquidity, uint256 amount0Min, uint256 amount1Min, uint256 deadline) params) payable",
  "function renounceOwnership()",
  "function rescueTokens(address token)",
  "function router() view returns (address)",
  "function sellNFTs(tuple(uint256 vaultId, uint256[] nftIds, uint256[] nftAmounts, uint256 deadline, uint24 fee, uint256 amountOutMinimum, uint160 sqrtPriceLimitX96) params) payable returns (uint256 wethReceived)",
  "function setEarlyWithdrawPenalty(uint256 earlyWithdrawPenaltyInWei_)",
  "function setLpTimelock(uint256 lpTimelock_)",
  "function setVTokenDustThreshold(uint256 vTokenDustThreshold_)",
  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
  "function transferOwnership(address newOwner)",
  "function vTokenDustThreshold() view returns (uint256)"
]